1. Basic Information:
   - Student ID: 00001651789
   - Student Name: Sudarshan Mehta
   - OS (bit): Mac OS Sonoma 64-bit
   - gcc version: Apple clang version 15.0.0 (clang-1500.1.0.2.5)

2. Meta-data:
   - Tables Table:
     - `table-id` (Integer): Unique identifier for each table.
     - `table-name` (VarChar(50)): Name of the table.
     - `file-name` (VarChar(50)): Name of the file associated with the table.
     - `system` (Integer): Flag indicating if the table is a system table (1 if system table, 0 otherwise).
   - Columns Table:
     - `table-id` (Integer): Foreign key referencing `table-id` from the Tables table.
     - `column-name` (VarChar(50)): Name of the column.
     - `column-type` (Integer): Type of the column (0 for Int, 1 for Real, 2 for VarChar).
     - `column-length` (Integer): Length of the column.
     - `column-position` (Integer): Position of the column in the table schema.

3. Internal Record Format:
   - The record format design follows a fixed-length representation with a null indicator at the beginning to handle null values efficiently.
   - VarChar fields are stored with a 4-byte integer representing the length of the string followed by the actual characters.
   - Update and delete operations are handled by marking the record as deleted and maintaining a slot directory to manage free space on the page.

4. Page Format:
   - The page format design includes a header containing metadata like the free space offset and the number of records.
   - Update and delete operations are managed by marking the record as deleted and updating the slot directory accordingly.

5. File Format:
   - The file format design follows a simple structure where pages are sequentially written to the file.

6. Implementation Detail:
   - The implementation handles system catalog tables (`Tables` and `Columns`) separately from user-defined tables.
   - Concurrency control mechanisms, such as locking or versioning, are implemented to ensure data consistency in a multi-user environment.
   - Buffer management techniques are employed to optimize I/O operations and reduce disk accesses.
   - Logging and recovery mechanisms are implemented to ensure durability and atomicity of transactions.

7. Other (optional):
   - The implementation focuses on efficiency and scalability, allowing the database system to handle large datasets and concurrent access efficiently.
   - Indexing mechanisms, such as B-trees or hash indexes, can be implemented to improve query performance and data retrieval speed.
   - Consideration is given to future extensibility, allowing the addition of advanced features like query optimization and distributed database support.
